import { Logger } from 'winston';
import { Controller, Get, Query } from '@nestjs/common';
import { IsEnum, IsOptional, IsString, MaxLength } from 'class-validator';
import {
  ApiProperty,
  ApiBearerAuth,
  ApiOperation,
  ApiTags,
  ApiUnauthorizedResponse,
  ApiUnprocessableEntityResponse,
  ApiBadRequestResponse,
  ApiOkResponse,
  ApiPropertyOptional,
} from '@nestjs/swagger';
import {
  cpfMask,
  KafkaServiceParam,
  LoggerParam,
  DefaultApiHeaders,
  HasPermission,
  RequestTransactionId,
  TransactionApiHeader,
} from '@zro/common';
import { KeyType } from '@zro/pix-keys/domain';
import { AuthUser, PersonType } from '@zro/users/domain';
import { AuthUserParam } from '@zro/users/infrastructure';
import { pixKeyTypeRest } from '@zro/api-users/infrastructure';
import { CreateDecodedPixKeyServiceKafka } from '@zro/pix-keys/infrastructure';
import {
  CreateDecodedPixKeyResponse,
  CreateDecodedPixKeyRequest,
} from '@zro/pix-keys/interface';

class CreateDecodedPixKeyRestQuery {
  @ApiProperty({ description: 'Pix key.' })
  @IsString()
  @MaxLength(77)
  key: string;

  @ApiProperty(pixKeyTypeRest)
  @IsEnum(KeyType)
  type: KeyType;

  @ApiProperty({
    description:
      "If one is not provided, it'll be generated by DICT and returned in the response",
    required: false,
  })
  @IsOptional()
  @IsString()
  @MaxLength(255)
  endToEndId?: string;
}

class CreateDecodedPixKeyRestResponse {
  @ApiProperty({
    description: 'Unique decoded pix key UUID.',
    example: 'd5e0bec8-8695-4557-b0dd-021788cd83ef',
  })
  id: string;

  @ApiProperty(pixKeyTypeRest)
  type: KeyType;

  @ApiProperty({
    enum: PersonType,
    example: PersonType.LEGAL_PERSON,
  })
  person_type: PersonType;

  @ApiProperty({
    description: 'Pix key.',
  })
  key: string;

  @ApiProperty({
    description: "Person's document number.",
  })
  document: string;

  @ApiProperty({
    description: "Person's name.",
  })
  name: string;

  @ApiPropertyOptional({
    description: "Company's trade name.",
  })
  trade_name?: string;

  @ApiProperty()
  end_to_end_id: string;

  constructor(props: CreateDecodedPixKeyResponse) {
    this.id = props.id;
    this.type = props.type;
    this.person_type = props.personType;
    this.key = props.key;
    this.document = cpfMask(props.document);
    this.name = props.name;
    this.trade_name = props.tradeName;
    this.end_to_end_id = props.endToEndId;
  }
}

// Pix key decoder controller. Controller is protected by JWT access token
@ApiTags('Pix | Keys')
@ApiBearerAuth()
@DefaultApiHeaders()
@TransactionApiHeader()
@Controller('pix/keys/decode')
@HasPermission('api-users-get-pix-keys-decode-by-key')
export class CreateDecodedPixKeyRestController {
  /**
   * Decode pix key endpoint.
   */
  @ApiOperation({
    summary: 'Decodes pix key.',
  })
  @ApiOkResponse({
    description: 'Pix key decoded successfully.',
    type: CreateDecodedPixKeyRestResponse,
  })
  @ApiUnauthorizedResponse({
    description: 'User authentication failed.',
  })
  @ApiBadRequestResponse({
    description:
      'If any required params are missing or has invalid format or type.',
  })
  @ApiUnprocessableEntityResponse({
    description:
      'If any required params are missing or has invalid format or type.',
  })
  @Get()
  async execute(
    @AuthUserParam() user: AuthUser,
    @Query() query: CreateDecodedPixKeyRestQuery,
    @KafkaServiceParam(CreateDecodedPixKeyServiceKafka)
    decodePixKeyService: CreateDecodedPixKeyServiceKafka,
    @LoggerParam(CreateDecodedPixKeyRestController)
    logger: Logger,
    @RequestTransactionId() transactionId: string,
  ): Promise<CreateDecodedPixKeyRestResponse> {
    // Creates a payload
    const payload: CreateDecodedPixKeyRequest = {
      id: transactionId,
      userId: user.uuid,
      key: query.key,
      endToEndId: query.endToEndId,
      type: query.type,
    };

    logger.debug('Decoding pix key.', { user, payload });

    // Calls pix key decoder service.
    const result = await decodePixKeyService.execute(payload);

    logger.debug('Pix key decoded result.', { result });

    const response = result && new CreateDecodedPixKeyRestResponse(result);

    return response;
  }
}
